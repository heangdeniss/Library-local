<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title><%= categoryName %> Books</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/styles/sub.css">
    <link rel="stylesheet" href="styles/borrowing.css">    <style>
        body {
            padding-top: 120px; /* Add padding to accommodate fixed header */
        }
        
        .book-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 30px;
            margin-top: 30px;
        }
        
        .book-card {
            border: 1px solid #ddd;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s, box-shadow 0.3s;
            background-color: white;
        }
        
        .book-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
        }
        
        .book-info {
            padding: 20px;
        }
        
        .book-title {
            font-size: 1.4rem;
            margin-bottom: 10px;
            color: #2c3e50;
        }
        
        .book-author {
            font-size: 1rem;
            color: #7f8c8d;
            margin-bottom: 15px;
        }
        
        .book-description {
            font-size: 0.9rem;
            color: #34495e;
            margin-bottom: 20px;
        }
        
        .book-date {
            font-size: 0.8rem;
            color: #95a5a6;
        }
        
        .book-actions {
            display: flex;
            justify-content: space-between;
            margin-top: 15px;
        }
        
        .view-btn {
            padding: 8px 15px;
            background-color: #3498db;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.3s;
            text-decoration: none;
            display: inline-block;
        }
          .view-btn:hover {
            background-color: #2980b9;
        }
        
        .borrow-btn {
            background-color: #27ae60;
            color: white;
            padding: 8px 15px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 0.9rem;
            text-decoration: none;
            display: inline-block;
            margin-left: 10px;
            transition: background-color 0.3s;
        }
        
        .borrow-btn:hover:not(:disabled) {
            background-color: #219a52;
        }
        
        .borrow-btn:disabled {
            background-color: #95a5a6;
            cursor: not-allowed;
        }
        
        .availability-info {
            background-color: #e8f5e8;
            border-left: 4px solid #27ae60;
            padding: 8px 12px;
            margin: 10px 0;
            border-radius: 4px;
            font-size: 0.85rem;
        }
        
        .availability-info.unavailable {
            background-color: #fdf2f2;
            border-left-color: #e74c3c;
            color: #721c24;
        }
        
        .availability-info.available {
            color: #155724;
        }
        
        .category-header {
            background-color: #f8f9fa;
            padding: 40px 0;
            margin-bottom: 30px;
            text-align: center;
            border-bottom: 1px solid #e9ecef;
        }
        
        .category-name {
            font-size: 2.5rem;
            color: #2c3e50;
            margin-bottom: 10px;
        }
        
        .category-description {
            font-size: 1.1rem;
            color: #7f8c8d;
            max-width: 700px;
            margin: 0 auto;
        }
        
        .no-books {
            text-align: center;
            padding: 50px;
            font-size: 1.2rem;
            color: #7f8c8d;
            background-color: #f8f9fa;
            border-radius: 8px;
        }
        
        .return-btn {
            background-color: #f1f1f1;
            color: #333;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 1rem;
            margin: 20px 0;
            transition: background-color 0.3s;
        }
        
        .return-btn:hover {
            background-color: #ddd;
        }    </style>
</head>
<body>
    <%- include("partials/header1.ejs") %>
    
    <div class="container">
        <div class="category-header">
            <h1 class="category-name"><%= categoryName %></h1>
            <p class="category-description"><%= categoryDescription %></p>
        </div>
        
        <button class="return-btn" onclick="window.location.href='/book1'">Back to Categories</button>
        
        <div style="text-align: center; margin: 20px 0;">
            <a href="/borrowing/dashboard" class="btn btn-primary" style="background-color: #3498db; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px; margin-right: 10px;">My Borrowing Dashboard</a>
            <a href="/borrowing/books" class="btn btn-secondary" style="background-color: #95a5a6; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;">Browse All Books</a>
        </div>
          <% if (books && books.length > 0) { %>
            <div class="book-grid">
                <% books.forEach(book => { %>
                    <div class="book-card">
                        <div class="book-info">
                            <h2 class="book-title"><%= book.title %></h2>
                            <p class="book-author">By <%= book.author %></p>
                            <% if (book.description) { %>
                                <p class="book-description"><%= book.description %></p>
                            <% } %>
                            <p class="book-date">Uploaded: <%= new Date(book.upload_date).toLocaleDateString() %></p>
                            
                            <!-- Availability Status -->
                            <% 
                                const availableCopies = book.available_copies || book.total_copies || 1;
                                const totalCopies = book.total_copies || 1;
                                const isAvailable = availableCopies > 0;
                            %>
                            <div class="availability-info <%= isAvailable ? 'available' : 'unavailable' %>">
                                <% if (isAvailable) { %>
                                    ✓ Available (<%= availableCopies %> of <%= totalCopies %> copies)
                                <% } else { %>
                                    ✗ Currently Unavailable (All <%= totalCopies %> copies borrowed)
                                <% } %>
                            </div>                              <div class="book-actions">
                                <a href="/view-pdf/<%= book.id %>" class="view-btn">Read</a>
                                <% if (isAvailable) { %>
                                    <button class="borrow-btn" data-book-id="<%= book.id %>" onclick="borrowBook(this.dataset.bookId)">
                                        Borrow
                                    </button>
                                <% } else { %>
                                    <button class="borrow-btn" disabled>
                                        Unavailable
                                    </button>
                                <% } %>
                            </div>
                        </div>
                    </div>
                <% }); %>
            </div>
        <% } else { %>
            <div class="no-books">
                <p>No books available in this category yet.</p>
            </div>
        <% } %>
    </div>      <script>
        async function borrowBook(bookId) {
            if (!confirm('Are you sure you want to borrow this book?')) {
                return;
            }

            // Find the button that was clicked
            const button = event.target;
            const originalText = button.textContent;
            
            // Show loading state
            button.disabled = true;
            button.textContent = 'Borrowing...';

            try {
                const response = await fetch(`/borrowing/borrow/${bookId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                const result = await response.json();

                if (result.success) {
                    // Show success message
                    showMessage(`${result.message}\nDue date: ${result.dueDate}`, 'success');
                    
                    // Update button state
                    button.textContent = 'Borrowed';
                    button.style.background = '#28a745';
                    
                    setTimeout(() => {
                        location.reload(); // Refresh to update availability
                    }, 1500);
                } else {
                    showMessage(result.error || 'Error borrowing book', 'error');
                    // Reset button
                    button.disabled = false;
                    button.textContent = originalText;
                }
            } catch (error) {
                console.error('Error borrowing book:', error);
                showMessage('Error borrowing book. Please try again.', 'error');
                // Reset button
                button.disabled = false;
                button.textContent = originalText;
            }
        }

        function showMessage(message, type) {
            // Remove existing messages
            const existingMessages = document.querySelectorAll('.alert-message');
            existingMessages.forEach(msg => msg.remove());
            
            // Create new message
            const messageDiv = document.createElement('div');
            messageDiv.className = `alert alert-${type === 'success' ? 'success' : 'danger'} alert-message`;
            messageDiv.style.position = 'fixed';
            messageDiv.style.top = '130px';
            messageDiv.style.right = '20px';
            messageDiv.style.zIndex = '9999';
            messageDiv.style.minWidth = '300px';
            messageDiv.textContent = message;
            
            document.body.appendChild(messageDiv);
            
            // Auto remove after 5 seconds
            setTimeout(() => {
                messageDiv.remove();
            }, 5000);
        }
    </script>
</body>
</html>
